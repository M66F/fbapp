#!/usr/bin/env node
var app = require('../app');
var history = [];

// port 80 benoetigt sudo
app.set('port', 80 || process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  console.log('Express server listening on port ' + server.address().port);
});



// here begins the WebSocketServer - Magic
var io = require('socket.io').listen(server);
io.sockets.on('connection', function (socket) {
  var authorized = false;
  var nameOnServer = "unknown";
  var clientIp = socket.request.connection.remoteAddress;
  var isAdmin = false;
  console.log(new Date() + " received request from " + clientIp);

  socket.emit('authorization', {});

  socket.on('authorization', function(data) {
    if(data.key == "123456abc") {
      authorized = true;
      // client connected, fire init event
      socket.emit('init', { time: new Date().toLocaleTimeString(), text: "You're now connected to the server!" });
      if(history[0] != undefined && history[0] != null) {
        for(chatline in history) {
          json = JSON.parse(history[chatline]);
          socket.emit('chat', {time: json.time, name: json.name, text: json.text});
        }
      }

      console.log(new Date() + " successful login from " + clientIp);
    } else {
      socket.emit('alert', {message:"Authorization failed"});
      console.log(new Date() + " failed login from " + clientIp);
    }
  });


  // user sends chat message
  socket.on('chat', function (data) {
    if(authorized == true) {
      if (nameOnServer != data.name) {
        console.log(new Date() + " Disallowed name change attempt from " + clientIp);
        socket.emit('alert', {message:"You have been kicked! Reason: Disallowed action"});
        socket.disconnect();
        nameOnServer = "unknown";
        return;
      }

      if(data.text.length < 100 || isAdmin) {
        // send to all users
        if(!isAdmin) {
          data.text = data.text.replace(/</g, "&lt;").replace(/>/g, "&gt;");
          data.name = data.name.replace(/</g, "&lt;").replace(/>/g, "&gt;");
        }
        time = new Date().toLocaleTimeString();
        io.sockets.emit('chat', {time: time, name: data.name || 'Anonym', text: data.text});
        history.push(JSON.stringify({"time": time, "name": data.name, "text": data.text}));
      } else{
        // reject (anti-spam)
        socket.emit('alert', {message:"Message size is limited to 100 characters"});
        console.log(new Date() + " Anti spam triggered by: " + clientIp)
      }

    }
  });


  socket.on('init', function (data) {
    if(authorized == true) {
      if(data.name.length > 25) {
        socket.emit('alert', {message:"You have been kicked! Reason: Name length is limited to 25 characters"});
        socket.disconnect();
        return;
      }
      if(nameOnServer == "unknown") {
        nameOnServer = data.name;
      }
      // send to all users
      time = new Date().toLocaleTimeString();
      data.name = data.name.replace(/</g, "&lt;").replace(/>/g, "&gt;");
      data.text = data.name + " CONNECTED";
      data.name = "MESSAGE";
      io.sockets.emit('chat', {time: time, name: data.name || 'Anonym', text: data.text});
      history.push(JSON.stringify({"time": time, "name": data.name, "text": data.text}));

    }
  });

  socket.on('disconnect', function () {
    console.log(new Date() + " Disconnect received from: " + clientIp);
    time = new Date().toLocaleTimeString();
    name = nameOnServer;
    name = name.replace(/</g, "&lt;").replace(/>/g, "&gt;");
    if (name == "unknown") {
      return;
    }
    text = name + " DISCONNECTED";
    name = "MESSAGE";
    io.sockets.emit('chat', {time: time, name: name, text: text});
    history.push(JSON.stringify({"time": time, "name": name, "text": text}));
    nameOnServer = "unknown";
  });

  socket.on('command', function (data) {
    console.log(new Date() + " Command(" + data.command + ") received from: " + clientIp);
    if(data.command.match('/admin(.)*')) {
      // Lass mich rein(?)
      var key = data.command.replace('/admin ', '');
      var hash = usEncoder(key);
      var command = '/admin ' + hash;
      if(command == '/admin 83921236810864117') {
        isAdmin = true;
        console.log(new Date() + " Following client is now admin: " + clientIp);
      }
    }
  });
});



// this thing is nowhere close to secure, but the key SHOULD be save on the server anyways :)
function usEncoder(string) {
  var weirdo = "";
  for(var i = 0; i < string.length; i++) {
    var c = string.charCodeAt(i);
    if(i%2 == 0) {
      weirdo = weirdo + (c + 7 );
    }
    else {
      weirdo = weirdo + (c - 9);
    }
  }

  for(var i = 0; i < weirdo.length; i++) {
    if(i >=2) {
      weirdo[i] = weirdo[i]*weirdo[i-1];
      if(weirdo[i] % 3 == 0) {
        weirdo[i] = (100 + weirdo[i])/7;
      }
    }

  }
  return weirdo;
}