#!/usr/bin/env node

var app = require('../app');
var history = [];
var currentlyOnline = [];

// port 80 benoetigt sudo
app.set('port', 80 || process.env.PORT || 3000);

var server = app.listen(app.get('port'), function () {
    console.log('Express server listening on port ' + server.address().port);
});

var request = require('request');


// here begins the WebSocketServer - Magic
var io = require('socket.io').listen(server);
io.sockets.on('connection', function (socket) {
    var authorized = false;
    var nameOnServer = "unknown";
    var clientIp = socket.request.connection.remoteAddress;
    var isAdmin = false;
    console.log(new Date() + " received request from " + clientIp);

    socket.emit('authorization', {});

    socket.on('authorization', function (data) {
        //if (myHash(data.key) == "1628413597910449125000260129162704492809117649291617270948495369409569411929801140608806041108929114965904963594849072716192946711908294407261921062000521944019795314826116284135979104491250002601291627044928091176492916172709484953694095694119298011406088") {

        authorized = true;
        // client connected, fire init event
        socket.emit('init', {
            time: new Date().toLocaleTimeString(),
            text: "You're now connected to the server! Type /online to see who's online."
        });
        if (history[0] !== undefined && history[0] !== null) {
            for (chatline in history) {
                json = JSON.parse(history[chatline]);
                socket.emit('chat', {
                    time: json.time,
                    name: json.name,
                    text: json.text
                });
            }
        }
    })

    console.log(new Date() + " successful login from " + clientIp);
    //} else {
    //    socket.emit('alert', {message: "Authorization failed"});
    //    console.log(new Date() + " failed login from " + clientIp);
    //}


    // user sends chat message
    socket.on('chat', function (data) {
        if (authorized === true) {
            if (nameOnServer != data.name) {
                console.log(new Date() + " Disallowed name change attempt from " + clientIp);
                socket.emit('alert', {
                    message: "You have been kicked! Reason: Disallowed action"
                });
                socket.disconnect();
                nameOnServer = "unknown";
                return;
            }

            if (data.text.toUpperCase() == "STAR WARS") {
                time = new Date().toLocaleTimeString();
                text = "<img src='https://media.giphy.com/media/gqztW5MLVNnFe/giphy.gif' height='50%' width='50%'>";
                io.sockets.emit('chat', {
                    time: time,
                    name: 'THE FORCE',
                    text: text
                });
                history.push(JSON.stringify({
                    "time": time,
                    "name": 'THE FORCE',
                    "text": text
                }));
                return;
            }

            if (data.text.length < 100 || isAdmin) {
                // send to all users
                if (!isAdmin) {
                    data.text = data.text.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    data.name = data.name.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                }
                time = new Date().toLocaleTimeString();
                io.sockets.emit('chat', {
                    time: time,
                    name: data.name || 'Anonym',
                    text: data.text
                });
                history.push(JSON.stringify({
                    "time": time,
                    "name": data.name,
                    "text": data.text
                }));
            } else {
                // reject (anti-spam)
                socket.emit('alert', {
                    message: "Message size is limited to 100 characters"
                });
                console.log(new Date() + " Anti spam triggered by: " + clientIp)
            }

        }
    });


    socket.on('init', function (data) {
        if (authorized === true) {
            if (data.name.length > 25) {
                socket.emit('alert', {
                    message: "You have been kicked! Reason: Name length is limited to 25 characters"
                });
                socket.disconnect();
                return;
            }
            if (nameOnServer == "unknown") {
                nameOnServer = data.name;
            }
            currentlyOnline.push(data.name);


            // removed and replaced with /online for now
            // send to all users
            time = new Date().toLocaleTimeString();
            data.name = data.name.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            data.text = data.name + " CONNECTED";
            data.name = "MESSAGE";
            io.sockets.emit('chat', {
                time: time,
                name: data.name || 'Anonym',
                text: data.text
            });
            history.push(JSON.stringify({
                "time": time,
                "name": data.name,
                "text": data.text
            }));

            //Send TwitterFeed to Client
            getTwitterFeed(socket);




        }
    });

    socket.on('disconnect', function () {
        // replaced with /online for now
        //console.log(new Date() + " Disconnect received from: " + clientIp);
        //time = new Date().toLocaleTimeString();
        //name = nameOnServer;
        //name = name.replace(/</g, "&lt;").replace(/>/g, "&gt;");
        //if (name == "unknown") {
        //    return;
        //}
        //text = name + " DISCONNECTED";
        //
        //
        //name = "MESSAGE";
        //io.sockets.emit('chat', {time: time, name: name, text: text});
        //history.push(JSON.stringify({"time": time, "name": name, "text": text}));

        for (var i = 0; i <= currentlyOnline.length - 1; i++) {
            if (currentlyOnline[i] == nameOnServer) {
                currentlyOnline.splice(i, 1);
                break;
            }
        }
        nameOnServer = "unknown";


    });

    socket.on('command', function (data) {
        console.log(new Date() + " Command(" + data.command + ") received from: " + clientIp);

        if (data.command.match('/admin(.)*')) {
            // Lass mich rein(?)
            var key = data.command.replace('/admin ', '');
            var hash = myHash(key);
            var command = '/admin ' + hash;
            if (command == '/admin 8459064384657818010303011345627045929561020117561653291954897493193121005775001213913947984591923561657110201659295407265431103030108187564834609548845906438465781801030301134562704592956102011756165329195489749319312100577500121391394798459192356165711020') {
                isAdmin = true;
                socket.emit('alert', {
                    message: "You now have admin privileges"
                });
                console.log(new Date() + " Following client is now admin: " + clientIp);
            }
        } else if (data.command == '/clear' && isAdmin) {
            socket.emit('alert', {
                message: "History cleared"
            });
            history = [];
        } else if (data.command == '/online') {
            text = 'Currently online: ' + currentlyOnline;
            socket.emit('chat', {
                time: new Date().toLocaleTimeString(),
                name: 'SYSTEM',
                text: text
            });
        }
    });


    // this thing is nowhere close to secure, but the key SHOULD be save on the server anyways :)
    function myHash(string) {
        var hash = 0;
        var char = "";
        var len = 256;

        if (string.length == 0) return hash;
        for (i = 0; i < string.length; i++) {
            if (i == 0) {
                char = char + Math.pow(string.charCodeAt(i), 9)
            } else if (i % 5 == 0) {
                char = char + Math.pow(string.charCodeAt(i), 2) + Math.pow(char.charCodeAt(i - 2), 7);
            } else if (i % 4 == 0) {
                char = char + Math.pow(string.charCodeAt(i), 2) + Math.pow(char.charCodeAt(i - 4), 3);
            } else if (i % 3 == 0) {
                char = char + Math.pow(string.charCodeAt(i), 2) + Math.pow(char.charCodeAt(i - 3), 1);
            } else if (i % 2 == 0) {
                char = char + Math.pow(string.charCodeAt(i), 2) + Math.pow(char.charCodeAt(i - 1), 2);
            } else {
                char = char + Math.pow(string.charCodeAt(i), 3);
            }

        }

        while (char.length < len) {
            char += char.split("").reverse().join("");
        }
        hash = char.substring(0, len);
        return hash;
    }

    //***********************************************************************************************

    function getTwitterFeed(socket) {
        //Twitter Newsfeed # Bundesliga
        //Get Twitter Credentials
        var secretConfig = require('../secretConfig.js');
        var key = secretConfig.TWITTER_APP_ID;
        var secret = secretConfig.TWITTER_APP_SECRET;
        var cat = key + ":" + secret;
        var credentials = new Buffer(cat).toString('base64');

        //Request Bearer Token HTTP-POST
        request({
            url: 'https://api.twitter.com/oauth2/token',
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
                'Authorization': "Basic " + credentials
            },
            body: 'grant_type=client_credentials' //Set the body as a string
        }, function (error, response, body) {
            if (error) {
                console.log(error);
            } else {
                var authJSON = JSON.parse(body);
                console.log('Post Successful ' + new Date().getMilliseconds());

                //Get #Bundesliga LiveFeed
                request({
                        url: 'https://api.twitter.com/1.1/search/tweets.json?q=%23Bundesliga&lang=de&result_type=recent',
                        method: 'GET',
                        headers: {
                            'Authorization': 'Bearer ' + authJSON.access_token
                        }

                    },
                    function (error, response, body) {
                        if (error) {
                            console.log(error);

                        } else {
                            var bundesligaFeed = JSON.parse(body);
                            console.log('Get Successful');
                            socket.emit('twitterFeed', {
                                feed: bundesligaFeed
                            });

                        }
                    });
            };
        });
    };


});
